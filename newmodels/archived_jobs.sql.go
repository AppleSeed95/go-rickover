// Code generated by sqlc. DO NOT EDIT.
// source: archived_jobs.sql

package newmodels

import (
	"context"

	"github.com/kevinburke/go-types"
)

const createArchivedJob = `-- name: CreateArchivedJob :one
INSERT INTO archived_jobs (id, name, attempts, status, data, expires_at)
SELECT id, $2, $4, $3, data, expires_at
FROM queued_jobs
WHERE queued_jobs.id = $1
AND name = $2
RETURNING id, name, attempts, status, created_at, data, expires_at, auto_id
`

type CreateArchivedJobParams struct {
	ID       types.PrefixUUID  `json:"id"`
	Name     string            `json:"name"`
	Status   ArchivedJobStatus `json:"status"`
	Attempts int16             `json:"attempts"`
}

func (q *Queries) CreateArchivedJob(ctx context.Context, arg CreateArchivedJobParams) (ArchivedJob, error) {
	row := q.queryRow(ctx, q.createArchivedJobStmt, createArchivedJob,
		arg.ID,
		arg.Name,
		arg.Status,
		arg.Attempts,
	)
	var i ArchivedJob
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Attempts,
		&i.Status,
		&i.CreatedAt,
		&i.Data,
		&i.ExpiresAt,
		&i.AutoID,
	)
	return i, err
}

const getArchivedJob = `-- name: GetArchivedJob :one
SELECT id, name, attempts, status, created_at, data, expires_at, auto_id
FROM archived_jobs
WHERE id = $1
`

func (q *Queries) GetArchivedJob(ctx context.Context, id types.PrefixUUID) (ArchivedJob, error) {
	row := q.queryRow(ctx, q.getArchivedJobStmt, getArchivedJob, id)
	var i ArchivedJob
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Attempts,
		&i.Status,
		&i.CreatedAt,
		&i.Data,
		&i.ExpiresAt,
		&i.AutoID,
	)
	return i, err
}
