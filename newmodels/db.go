// Code generated by sqlc. DO NOT EDIT.

package newmodels

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.acquireJobStmt, err = db.PrepareContext(ctx, acquireJob); err != nil {
		return nil, fmt.Errorf("error preparing query AcquireJob: %w", err)
	}
	if q.countReadyAndAllStmt, err = db.PrepareContext(ctx, countReadyAndAll); err != nil {
		return nil, fmt.Errorf("error preparing query CountReadyAndAll: %w", err)
	}
	if q.createArchivedJobStmt, err = db.PrepareContext(ctx, createArchivedJob); err != nil {
		return nil, fmt.Errorf("error preparing query CreateArchivedJob: %w", err)
	}
	if q.createJobStmt, err = db.PrepareContext(ctx, createJob); err != nil {
		return nil, fmt.Errorf("error preparing query CreateJob: %w", err)
	}
	if q.decrementQueuedJobStmt, err = db.PrepareContext(ctx, decrementQueuedJob); err != nil {
		return nil, fmt.Errorf("error preparing query DecrementQueuedJob: %w", err)
	}
	if q.deleteAllJobsStmt, err = db.PrepareContext(ctx, deleteAllJobs); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAllJobs: %w", err)
	}
	if q.deleteAllQueuedJobsStmt, err = db.PrepareContext(ctx, deleteAllQueuedJobs); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAllQueuedJobs: %w", err)
	}
	if q.deleteQueuedJobStmt, err = db.PrepareContext(ctx, deleteQueuedJob); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteQueuedJob: %w", err)
	}
	if q.enqueueJobStmt, err = db.PrepareContext(ctx, enqueueJob); err != nil {
		return nil, fmt.Errorf("error preparing query EnqueueJob: %w", err)
	}
	if q.enqueueJobFastStmt, err = db.PrepareContext(ctx, enqueueJobFast); err != nil {
		return nil, fmt.Errorf("error preparing query EnqueueJobFast: %w", err)
	}
	if q.getAllJobsStmt, err = db.PrepareContext(ctx, getAllJobs); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllJobs: %w", err)
	}
	if q.getArchivedJobStmt, err = db.PrepareContext(ctx, getArchivedJob); err != nil {
		return nil, fmt.Errorf("error preparing query GetArchivedJob: %w", err)
	}
	if q.getJobStmt, err = db.PrepareContext(ctx, getJob); err != nil {
		return nil, fmt.Errorf("error preparing query GetJob: %w", err)
	}
	if q.getOldInProgressJobsStmt, err = db.PrepareContext(ctx, getOldInProgressJobs); err != nil {
		return nil, fmt.Errorf("error preparing query GetOldInProgressJobs: %w", err)
	}
	if q.getQueuedCountsByStatusStmt, err = db.PrepareContext(ctx, getQueuedCountsByStatus); err != nil {
		return nil, fmt.Errorf("error preparing query GetQueuedCountsByStatus: %w", err)
	}
	if q.getQueuedJobStmt, err = db.PrepareContext(ctx, getQueuedJob); err != nil {
		return nil, fmt.Errorf("error preparing query GetQueuedJob: %w", err)
	}
	if q.markInProgressStmt, err = db.PrepareContext(ctx, markInProgress); err != nil {
		return nil, fmt.Errorf("error preparing query MarkInProgress: %w", err)
	}
	if q.oldAcquireJobStmt, err = db.PrepareContext(ctx, oldAcquireJob); err != nil {
		return nil, fmt.Errorf("error preparing query OldAcquireJob: %w", err)
	}
	if q.truncateStmt, err = db.PrepareContext(ctx, truncate); err != nil {
		return nil, fmt.Errorf("error preparing query Truncate: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.acquireJobStmt != nil {
		if cerr := q.acquireJobStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing acquireJobStmt: %w", cerr)
		}
	}
	if q.countReadyAndAllStmt != nil {
		if cerr := q.countReadyAndAllStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countReadyAndAllStmt: %w", cerr)
		}
	}
	if q.createArchivedJobStmt != nil {
		if cerr := q.createArchivedJobStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createArchivedJobStmt: %w", cerr)
		}
	}
	if q.createJobStmt != nil {
		if cerr := q.createJobStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createJobStmt: %w", cerr)
		}
	}
	if q.decrementQueuedJobStmt != nil {
		if cerr := q.decrementQueuedJobStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing decrementQueuedJobStmt: %w", cerr)
		}
	}
	if q.deleteAllJobsStmt != nil {
		if cerr := q.deleteAllJobsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAllJobsStmt: %w", cerr)
		}
	}
	if q.deleteAllQueuedJobsStmt != nil {
		if cerr := q.deleteAllQueuedJobsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAllQueuedJobsStmt: %w", cerr)
		}
	}
	if q.deleteQueuedJobStmt != nil {
		if cerr := q.deleteQueuedJobStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteQueuedJobStmt: %w", cerr)
		}
	}
	if q.enqueueJobStmt != nil {
		if cerr := q.enqueueJobStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing enqueueJobStmt: %w", cerr)
		}
	}
	if q.enqueueJobFastStmt != nil {
		if cerr := q.enqueueJobFastStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing enqueueJobFastStmt: %w", cerr)
		}
	}
	if q.getAllJobsStmt != nil {
		if cerr := q.getAllJobsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllJobsStmt: %w", cerr)
		}
	}
	if q.getArchivedJobStmt != nil {
		if cerr := q.getArchivedJobStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getArchivedJobStmt: %w", cerr)
		}
	}
	if q.getJobStmt != nil {
		if cerr := q.getJobStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getJobStmt: %w", cerr)
		}
	}
	if q.getOldInProgressJobsStmt != nil {
		if cerr := q.getOldInProgressJobsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getOldInProgressJobsStmt: %w", cerr)
		}
	}
	if q.getQueuedCountsByStatusStmt != nil {
		if cerr := q.getQueuedCountsByStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getQueuedCountsByStatusStmt: %w", cerr)
		}
	}
	if q.getQueuedJobStmt != nil {
		if cerr := q.getQueuedJobStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getQueuedJobStmt: %w", cerr)
		}
	}
	if q.markInProgressStmt != nil {
		if cerr := q.markInProgressStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing markInProgressStmt: %w", cerr)
		}
	}
	if q.oldAcquireJobStmt != nil {
		if cerr := q.oldAcquireJobStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing oldAcquireJobStmt: %w", cerr)
		}
	}
	if q.truncateStmt != nil {
		if cerr := q.truncateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing truncateStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                          DBTX
	tx                          *sql.Tx
	acquireJobStmt              *sql.Stmt
	countReadyAndAllStmt        *sql.Stmt
	createArchivedJobStmt       *sql.Stmt
	createJobStmt               *sql.Stmt
	decrementQueuedJobStmt      *sql.Stmt
	deleteAllJobsStmt           *sql.Stmt
	deleteAllQueuedJobsStmt     *sql.Stmt
	deleteQueuedJobStmt         *sql.Stmt
	enqueueJobStmt              *sql.Stmt
	enqueueJobFastStmt          *sql.Stmt
	getAllJobsStmt              *sql.Stmt
	getArchivedJobStmt          *sql.Stmt
	getJobStmt                  *sql.Stmt
	getOldInProgressJobsStmt    *sql.Stmt
	getQueuedCountsByStatusStmt *sql.Stmt
	getQueuedJobStmt            *sql.Stmt
	markInProgressStmt          *sql.Stmt
	oldAcquireJobStmt           *sql.Stmt
	truncateStmt                *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                          tx,
		tx:                          tx,
		acquireJobStmt:              q.acquireJobStmt,
		countReadyAndAllStmt:        q.countReadyAndAllStmt,
		createArchivedJobStmt:       q.createArchivedJobStmt,
		createJobStmt:               q.createJobStmt,
		decrementQueuedJobStmt:      q.decrementQueuedJobStmt,
		deleteAllJobsStmt:           q.deleteAllJobsStmt,
		deleteAllQueuedJobsStmt:     q.deleteAllQueuedJobsStmt,
		deleteQueuedJobStmt:         q.deleteQueuedJobStmt,
		enqueueJobStmt:              q.enqueueJobStmt,
		enqueueJobFastStmt:          q.enqueueJobFastStmt,
		getAllJobsStmt:              q.getAllJobsStmt,
		getArchivedJobStmt:          q.getArchivedJobStmt,
		getJobStmt:                  q.getJobStmt,
		getOldInProgressJobsStmt:    q.getOldInProgressJobsStmt,
		getQueuedCountsByStatusStmt: q.getQueuedCountsByStatusStmt,
		getQueuedJobStmt:            q.getQueuedJobStmt,
		markInProgressStmt:          q.markInProgressStmt,
		oldAcquireJobStmt:           q.oldAcquireJobStmt,
		truncateStmt:                q.truncateStmt,
	}
}
